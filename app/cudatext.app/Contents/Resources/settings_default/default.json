//default.json config is for copying parts to user.json config,
//it's not read as actual config. User config is read.
//
//Some options have suffix, for OSes:
//Windows: none, Linux: "__linux", macOS: "__mac", FreeBSD: "__freebsd"
{
  //[Font]
  //Text font name [has suffix]
  "font_name": "Consolas",
  "font_name__linux": "Courier New",
  "font_name__mac": "Monaco",
  
  //Text font size [has suffix]
  "font_size": 10,
  "font_size__linux": 10,
  "font_size__mac": 10,
  
  //Enable to render font ligatures (e.g. font Fira Code)
  //Option works only on Windows yet. On Linux: always on.
  "font_ligatures": false,
  
  //Text font rendering quality [has suffix]
  //  0: Default 
  //  1: Draft 
  //  2: Proof 
  //  3: Non Antialiased 
  //  4: Antialiased
  //  5: Cleartype 
  //  6: Cleartype Natural 
  "font_quality": 0,
  "font_quality__linux": 0,
  "font_quality__mac": 0,
  
  //UI elements font name [has suffix]
  "ui_font_name": "default",
  "ui_font_name__linux": "default",
  "ui_font_name__mac": "default",

  //UI elements font size [has suffix]
  "ui_font_size": 9,
  "ui_font_size__linux": 9,
  "ui_font_size__mac": 9,

  //Output panel font name [has suffix]
  "ui_font_output_name" : "default",
  "ui_font_output_name__linux" : "default",
  "ui_font_output_name__mac" : "default",

  //Output panel font size [has suffix]
  "ui_font_output_size" : 9,
  "ui_font_output_size__linux" : 9,
  "ui_font_output_size__mac" : 9,

  //[Ui]
  //Double-buffering of UI controls [has suffix]
  //  Use only if problems with rendering.
  //  If app shows flickering, change to true.
  //  If high-DPI monitor (e.g. Retina) shows blurred text, change to false.
  "ui_buffered": true,
  "ui_buffered__linux": true,
  "ui_buffered__mac": false,

  //Allow to run only one instance of CudaText
  "ui_one_instance": false,
  
  //[File]
  //File-change notification: enabled
  "ui_notif": true,

  //File-change notification: watch timer interval, seconds
  "ui_notif_time": 2,
  
  //[File/NonText]
  //Non-text files: allow to open
  //  0: prompt
  //  1: open
  //  2: don't open
  "ui_non_text": 0,

  //Non-text files: detection buffer size, Kb
  "ui_non_text_buffer": 64,

  //[File]
  //Reloading of file: if caret was on the last line, after reload put caret on new last line
  "ui_reload_tail": true,
  
  //Manual reopening/reloading of file: confirm to reload, if tab has unsaved changes
  "ui_reload_unsaved_confirm": true,
  
  //[Lexers]
  //Group lexers menu by 1st char of name  
  "ui_lexers_grouped": true,

  //[Text]
  //Highlight background of lines with carets
  "show_cur_line": false,

  //Highlight background of lines with carets: only minimal part of line, if line wrapped
  "show_cur_line_minimal": true,

  //Highlight background of lines with carets: only for focused editor
  "show_cur_line_only_focused": false,

  //Show additional vertical-lines at caret position(s)
  "show_cur_column": false,
  
  //Allow last line to scroll to the top of window
  "show_last_line_on_top": true,

  //Hilite selected block BG till right edge of window
  "show_full_sel_bg": false,

  //Hilite syntax-defined blocks BG till right edge if window
  "show_full_syntax_bg": true,

  //On dragging vert-scrollbar, show line-number hint at the top-right corner
  "show_hint_on_vert_scroll": false,

  //If N>0, text will be painted shifted to the right, 
  //so N columns will look like "centered" on screen
  "centering_width": 0,
  
  //Same as "centering_width", but it's applied only in Distraction-Free mode
  "centering_for_distraction_free": 100,
  
  //[Lexers]
  //Enable caret-depending highlighting
  //  e.g. Pascal hilites "begin"/"end" with green when caret is inside block,
  //  HTML/XML hilites opening/closing tags when caret is inside tag
  "lexer_dynamic_hilite": true,
  
  //Max number of lines in editor, for which dynamic-hiliting works
  //  Reason for option: dynamic-hiliting disables hiliting cache, so slows down scrolling
  "lexer_dynamic_hilite_max_lines": 2000,
  
  //Enable lexers' horizontal line separators
  //  e.g. Pascal lexer: green lines above procedure/function
  "lexer_line_separators": false,

  //If text size is bigger than this option, lexer analysis becomes delayed,
  //ie only after last text change + pause (during this pause you'll see non-colored text)
  "lexer_delayed_parsing_size": 100000,
  
  //Delayed lexer analysis: pause in msec
  "lexer_delayed_parsing_pause": 500,

  //[Text]
  //Style of folding
  //  0: if fold-hint empty: [...] from fold-pos, else hint
  //  1: if fold-hint empty: [line...] from fold-pos, else hint
  //  2: if fold-hint empty: [...] after line, else hint
  //  3: always [...] after line
  //  4: horiz colored line below line text
  "fold_style": 1,  

  //[Text/Commands]
  //If no selection, "Copy to clipboard" will take entire line with caret
  "copy_line_if_no_sel": true,

  //If no selection, "Cut to clipboard" will take entire line with caret
  "cut_line_if_no_sel": false,
  
  //If vertical (column) selection, copy it to clipboard aligned by spaces, all lines have same length
  "copy_column_aligned_by_spaces": true,

  //[Text]
  //If text typed, delete selection first
  "ovr_sel": true,

  //If text pasted from clipboard, and "overwrite" mode on (Ins key),
  //then pasted text overwrites editor text
  "ovr_on_paste": false,

  //[File/Save]
  //On saving file: delete spaces at lines ends
  "saving_trim_spaces": false,

  //On saving file: force end-of-line chars at file end (if not entered)
  "saving_force_final_eol": false,

  //[Text]
  //Commands Jump-next-word, Jump-previous-word, Select-word (double-click) will
  //see these chars as "letters" and select them like letters.
  //  Don't enter here: Latin/Rus/Greek/German letters, "0".."9", "_".
  //  Note: config read as utf8.
  "word_chars": "",

  //Show these unicode chars as "xNNNN" hex strings.
  //  Some chars are here by default: http://unicode.org/reports/tr9/#Directional_Formatting_Characters
  //  Note: config is read as utf8.
  "hex_chars": "",

  //Additional pixels per each line (vertically)
  "spacing_y": 1,

  //Additional pixels per each char (horizontally)
  //Works only on Windows yet
  "spacing_x": 0,

  //Tab-char width
  "tab_size": 8,

  //Tab-key enters spaces, instead of tab-char
  "tab_spaces": false,

  //Max x-position, before which tab-chars expand to N spaces (after it to 1 space)   
  "tab_max_pos_expanded": 500,
    
  //[View/Gutter]
  //Gutter: Enable gutter (all columns at the left side)
  "gutter_show": true,

  //Gutter: Show gutter's folding column
  "gutter_fold": true,

  //Gutter: If false, folding lines auto-hide on mouse-leave
  "gutter_fold_always": true,

  //Gutter: Style of folding icons
  //  0: plus/minus
  //  1: triangles
  "gutter_fold_icons": 0,

  //Gutter: Show gutter's bookmarks column
  "gutter_bookmarks": true,

  //[View/LineNumbers]
  //Show gutter's numbers column
  "numbers_show": true,

  //If not 0, special font size used for numbers
  "numbers_font_size": 0,

  //Line numbers: Numbers style
  //  0: all lines
  //  1: none
  //  2: each 10th line
  //  3: each 5th line
  "numbers_style": 0,

  //Show numbers for lines with carets
  "numbers_for_carets": false,

  //Center numbers on column
  "numbers_center": true,
    
  //[Text]
  //Style of block staples (aka indentation guides)
  //  0: don't show
  //  1: normal lines
  //  2: dash/dotted lines
  //  3: 2-pixel lines
  //  4: dotted lines
  "staples_style": 1,

  //[View/Ruler]
  //Ruler: show ruler (horizontal, on the top)
  "ruler_show": false,

  //Ruler: numeration style
  //  0: numbers 0 - 10 - 20 - 30...
  //  1: numbers 1 - 11 - 21 - 31...
  //  2: numbers 1 - 10 - 20 - 30...
  "ruler_numeration": 0,

  //Ruler: if not 0, special font size used for ruler
  "ruler_font_size": 8,

  //Ruler: ruler height, pixels
  "ruler_size": 20,

  //Ruler: numbers indent from top, pixels
  "ruler_text_indent": 0,

  //[View/Minimap]
  //Minimap: Show
  "minimap_show": false,

  //Minimap: Show selection area always. If false: show only on mouse-over.
  "minimap_sel_always": false,

  //Minimap: Show 1-pixel border around selection area
  "minimap_sel_border": false,

  //Minimap: Width
  //  value=0: autosize
  //  value>0: fixed width in chars
  "minimap_char_width": 0,

  //Minimap: Place minimap to the left side
  "minimap_at_left": false,

  //[View/Micromap]
  //Micromap: show (small vertical bar at the right edge)
  "micromap_show": false,

  //Micromap: width, pixels
  "micromap_width": 12,

  //[Text]
  //Fixed margin (vertical line) column.
  //Line is always shown, to hide: set to big value, e.g. 2000.
  "margin": 2000,

  //Additional vertical lines.
  //List of column positions, space-separated, e.g. "20 40 50".
  "margin_string": "",

  //[View/Unprinted]
  //Unprinted: Global enable-flag for unprinted_ options below (spaces, ends, details)
  "unprinted_show": false,

  //Unprinted: Show unprinted spaces/tabs
  "unprinted_spaces": true,

  //Unprinted: Show only trailing spaces/tabs, at line ends (don't show lefter)
  "unprinted_spaces_trailing": false,

  //Unprinted: Show unprinted end-of-line marks
  "unprinted_ends": true,

  //Unprinted: Paint at line-end strings like "un", "win", "mac"
  "unprinted_end_details": false,

  //Unprinted: Show control ASCII chars (codes 0..31) as replacement-char
  //(else show them as "xNN" hex codes)
  "unprinted_replace_spec": false,

  //Unprinted: Replacement-char hex code for control ASCII chars
  "unprinted_replace_to_code": "A4",

  //Unprinted: Paint arrow-down at end-of-line, instead of dot
  "unprinted_end_arrow": true,

  //Unprinted: Length of arrow for tab-char (1 is minimal, 0 means full size)
  "unprinted_tab_len": 1,

  //Unprinted: Scale (% of char height) of space dot
  "unprinted_space_dot_scale": 15,

  //Unprinted: Scale of end-of-line dot (if dot shown, not arrow)
  "unprinted_end_dot_scale": 30,

  //Unprinted: Scale of end-of-line text: "un", "win", "mac"
  "unprinted_end_font_scale": 80,

  //Unprinted: Scale of tab-arrow pointer (15..50)
  "unprinted_tab_ptr_scale": 22,

  //[Text/Wrap]
  //Wrap mode:
  //  0: off (faster)
  //  1: wrap at editor edge (changed on window resize)
  //  2: wrap at "fixed margin"
  "wrap_mode": 0,

  //Show wrapped parts of long line indented, like line itself
  //(if line begins with spaces/tabs)
  "wrap_indented": true,

  //Enable word-wrap (by window edge, by margin) only if lines count < option
  //Reason for option: disabled word-wrap (together with none-lexer) makes loading of huge files faster 1.5 times
  "wrap_enabled_max_lines": 60000,
  
  //[Text/Undo]
  //Undo: Max count of commands which can be undone
  "undo_limit": 5000,

  //Undo: Undo commands by groups (groups are separated eg by mouse clicks)
  "undo_grouped": true,

  //Undo: Enabled even after file saving
  "undo_after_save": true,

  //[Text/Caret]
  //Allow to place caret after end-of-line (virtual caret pos)
  "caret_after_end": false,

  //Caret blink time (msec)
  "caret_blink_time": 600,

  //Caret blinking enabled
  "caret_blink_en": true,

  //Enable multi-carets, see "Help--Mouse usage"
  "caret_multi": true,

  //Multi-carets are added when creating column (vertical) selection
  //note: option not ready!
  //"carets_with_column_sel": true,

  //Possible caret shapes:
  //  0: Full block
  //  1: Vert 1 pixels
  //  2: Vert 2 pixels
  //  3: Vert 3 pixels
  //  4: Vert 4 pixels
  //  5: Vert 10%
  //  6: Vert 15%
  //  7: Vert 20%
  //  8: Vert 25%
  //  9: Vert 30%
  // 10: Vert 35%
  // 11: Vert 40%
  // 12: Vert 50%
  // 13: Horz 1 pixels
  // 14: Horz 2 pixels
  // 15: Horz 3 pixels
  // 16: Horz 4 pixels
  // 17: Horz 5 pixels
  // 18: Horz 10%
  // 19: Horz 15%
  // 20: Horz 20%
  // 21: Horz 25%
  // 22: Horz 30%
  // 23: Horz 35%
  // 24: Horz 40%
  // 25: Horz 50%
  // 26: Frame
  //
  //Caret: shape for normal state
  "caret_shape": 1,

  //Caret: shape for overwrite state (Ins key: insert/overwrite)
  "caret_shape_ovr": 0,

  //Caret: shape for read-only mode
  "caret_shape_ro": 13,

  //Caret: positions after pasting column-block
  //  0: no change
  //  1: left-bottom
  //  2: right-bottom
  //  3: right-top
  //  4: carets column on left
  //  5: carets column on right 
  "caret_after_paste_column": 5,

  //[Find]
  //Find dialog: show window, not docked to app bottom (applied after restart)
  "find_separate_form": false,

  //Find dialog: suggest selection (of 1st caret)
  "find_suggest_sel": false,

  //Find dialog: suggest word (at 1st caret)
  "find_suggest_cur_word": true,

  //Find current selection next/prev: case-sensitive state
  //  0: case-sens off 
  //  1: case-sens on
  //  2: use option from Find dialog
  "find_sel_case": 2,

  //Find dialog: show "find first" button
  "find_show_findfirst": true,

  //Find dialog: multi-line mode: how height of inputs is increased
  "find_multiline_scale": 2.5,  

  //When doing "go to" or "find", and new position out of screen,
  //scroll by N chars from new position
  //  Vert indent: N<0: always indent from top;
  //               N>=0: indent from top (goto up) or bottom (goto down)
  //  Horz indent: N>=0
  "find_indent_vert": -5,
  "find_indent_horz": 10,

  //[Ui/Tabs]
  //UI tabs: multi-line mode, ie wrappable to several lines if lot of tabs
  "ui_tab_multiline": false,  
  
  //UI tabs: show angled left/right sides (note: they paint much slower)
  "ui_tab_angled": true,  
  
  //UI tabs: flat look
  "ui_tab_flat": false,
  
  //UI tabs: layout of buttons at left/right sides
  //String of few chars, each char is button. Separator for sides is comma.
  //Allowed chars (buttons):
  //  "<", ">" - scroll arrows
  //  "v" - arrow of dropdown menu
  //  "+" - plus button, the same as plus pseudo-tab, but don't hide if lot of tabs
  //  "x" - close button, the same as x icon on active tab
  "ui_tab_button_layout": "<>,v",
  
  //UI tabs: Width
  "ui_tab_size_x": 170,

  //UI tabs: Height
  "ui_tab_size_y": 25,

  //UI tabs: Position (side) of tabs
  //  0: top
  //  1: bottom
  //  2: left
  //  3: right  
  "ui_tab_position": 0,

  //UI tabs: Show "x" buttons on tabs
  //  0: dont show
  //  1: for all tabs
  //  2: for active tab
  //  3: for mouse-over tab
  "ui_tab_show_x": 1,

  //UI tabs: Show "+" pseudo-tab
  "ui_tab_show_plus": true,

  //UI tabs: Command "Set tab color" paints entire tab
  "ui_tab_fullcolor": false,

  //UI tabs: Double-click closes tab
  "ui_tab_2click_closes": false,

  //UI tabs: Show numbers on tabs
  "ui_tab_numbers": false,

  //UI tabs: Open new tab near the currently active tab
  "ui_tab_new_near_current": false,

  //UI tabs: Font styles of preview-tab (opened by single click on Project Manager file item)
  //  If "b" in value: bold
  //  If "i" in value: italic
  //  If "u" in value: underline
  //  If "s" in value: strikeout
  "ui_tab_preview_font_style": "iu",

  //[Ui/Listbox]
  //Listboxes: Commands/API listbox width
  "ui_listbox_size_x": 450,

  //Listboxes: Commands/API listbox height
  "ui_listbox_size_y": 300,

  //Listboxes: Auto-completion listbox width
  "ui_listbox_complete_size_x": 550,

  //Listboxes: Auto-completion listbox height
  "ui_listbox_complete_size_y": 200,

  //Listboxes: Enable fuzzy search in menu dialogs (see Wiki)
  "ui_listbox_fuzzy": true,

  //[Ui/History]
  //History: Max items in comboboxes history (0..200)
  "ui_max_history_edits": 20,

  //History: Max items in "recent files" menu (0..50)
  "ui_max_history_menu": 10,

  //History: Max items in "settings/history files.json" (0..400)
  "ui_max_history_files": 25,

  //[Ui]
  //Close program by Esc key
  "ui_esc_close": false,

  //Close Console by Esc key
  "ui_esc_close_console": true,
  
  //Initial folder of Open/Save-as dialogs, for untitled tabs
  "ui_initial_dir": "",

  //[Ui/Tree]
  //Tree: Focus another tree-node, after caret position changes
  "ui_tree_auto_sync": true,

  //Tree: Time (msec) after which tree filled
  "ui_tree_time_fill": 2000,

  //Tree: Time (msec) after which tree-node for caret focuses
  "ui_tree_time_focus": 300,

  //Tree: Show vertical/horiz lines in tree 
  "ui_tree_show_lines": true,

  //Tree: Show icons in tree (for lexers which assign icons, e.g. C#)
  "ui_tree_icons": true,

  //Tree: Icons theme
  //Folders from: codetreeicons
  "ui_tree_theme": "default_16x16",  

  //Tree: show tooltips for items, which don't fit by width
  "ui_tree_show_tooltips": true,
  
  //Tree: buffer/cache contents of code-tree, use this cache when changing tabs
  "ui_tree_cache": true,
  
  //[Text/NewDoc]
  //New tabs: Lexer name
  "newdoc_lexer": "",

  //New tabs: Encoding name
  //  See names list in Wiki. Examples: utf8, utf8_bom, utf16le, ansi, cp1250 etc  
  "newdoc_encoding": "utf8",

  //New tabs: End-of-lines chars
  //  1: Win
  //  2: Unix
  //  3: MacOS 9
  //  Defaults: Windows: 1, Linux/macOS: 2
  "newdoc_eol": 1,
  
  //[File]
  //When file opens, and cannot detect encoding, open it as ANSI (value=false)
  //or UTF8 (value=true) [has suffix]
  //  Defaults: Windows: false, Linux/macOS: true
  "def_encoding_utf8": false,
  "def_encoding_utf8__linux": true,
  "def_encoding_utf8__mac": true,

  //[Text/Indent]
  //Auto-indent by Enter (makes new line indented)
  "indent_auto": true,

  //Auto-indent kind
  //  0: indent (spaces and/or tabs) like in previous line
  //  1: by spaces
  //  2: by tabs+spaces
  //  3: by tabs only
  //  4: by spaces up to "(" last non-closed bracket in previous line
  "indent_kind": 0,

  //Indent size for Indent/Unindent commands:
  //in chars (value>0) or in tabs (value<0)
  "indent_size": 2,

  //Unindent command (Shift+Tab): if several lines (in block) have different indent,
  //stop unindent if one line already at left edge (other lines wont be moved)
  "unindent_keeps_align": true,

  //When indenting several lines, stretch selection after, to entire affected lines.
  //Otherwise, selection will be like before, shifted.
  "indent_makes_whole_line_sel": false,

  //[Mouse]
  //Drag-drop of text blocks
  "mouse_drag_drop": true,

  //After drag-drop of text block to another group, focus target editor
  "mouse_drag_drop_focus_target": true,

  //Right-click moves caret, before menu
  "mouse_rt_click_moves_caret": false,

  //Dbl-click and immediately drag makes selection by words
  "mouse_2click_drag_select_words": true,

  //Middle-click shows circle, then mouse-move near circle does auto-scrolling
  "mouse_mid_click_scroll": true,

  //Middle-click does paste from clipboard (usual in Linux apps)
  "mouse_mid_click_paste": false,

  //Enable selection of vertical blocks (Alt+drag)
  "mouse_column_selection": true,

  //Select entire line if clicked line number
  "mouse_gutter_click_sel": true,

  //Allow to zoom text using Ctrl+wheel
  "mouse_wheel_zoom": false,

  //Mouse wheel scrolling speed, vertical (in lines)
  "mouse_wheel_speed_vert": 3,

  //Mouse wheel scrolling speed, horizontal (in chars)
  "mouse_wheel_speed_horz": 10,
  
  //Call Goto-Definition command, by click with modifier key
  //  "": disabled
  //  "a": by Alt+click
  //  "sa": by Shift+Alt+click
  //  "ca": by Ctrl+Alt+click
  //  "sca": by Shift+Ctrl+Alt+click
  "mouse_goto_definition": "a",

  //Mouse click on line number: select line with end-of-line
  //(so caret placed on the next line)
  "mouse_click_number_selects_eol": true,

  //[Keys]
  //Key BkSp: do unindent too (if caret inside indented area)
  "key_bksp_unindent": true,

  //Key Tab: do block-indent too (if selection)
  "key_tab_indents_sel": true,

  //Key Home: first jump to nonspace, next to line start
  "key_home_to_nonspace": true,

  //Key End: first jump to ending nonspace, next to line end
  "key_end_to_nonspace": true,

  //Keys Home/End: when moving on long wrapped lines, treat wrapped parts like
  //separate lines and first jump to wrapped parts edge, next to line edge
  "key_home_end_nav_wrapped": true,

  //Keys PageUp/PageDown: keep relative offset from top of editor
  "key_page_keeps_rel_pos": true,

  //Keys PageUp/PageDown page size
  //  0: full height
  //  1: full height minus 1
  //  2: half height
  "key_page_size": 1,

  //Keys Up/Down: try to keep caret column
  //(if moving from long line, to short line, to long line again)
  "key_up_down_keeps_column": true,

  //Keys Up/Down: when moving on long wrapped lines, treat wrapped parts
  //like separate lines and try to jump to position above/below previous
  "key_up_down_nav_wrapped": true,

  //Keys Left/Right: if selection exists, try to jump to opposite selection edge
  "key_left_right_swap_sel": true,

  //... and keep previous selection
  "key_left_right_swap_sel_and_select": false,

  //[Ui/Statusbar]
  //States: no-selection, small-selection (1 line), stream-selection (>1 lines),
  //  column-selection, mul-carets.
  //Macros:
  //  {y}: line of top caret
  //  {y2}: line of bottom caret
  //  {yb}: line of 1st selection begin
  //  {ye}: line of 1st selection end
  //  {x}: column of top caret, tab-chars counted as 1
  //  {xx}: column of top caret, tab-chars expanded
  //  {count}: number of lines
  //  {carets}: number of carets
  //  {sel}: number of lines affected by selection(s)
  //  {cols}: number of columns in column-selection
  "ui_statusbar_no_sel": "Ln {y}, Col {xx}",
  "ui_statusbar_small_sel": "Ln {y}, Col {xx}, sel",
  "ui_statusbar_str_sel": "Ln {y}, Col {xx}, {sel} lines sel",
  "ui_statusbar_col_sel": "{sel}x{cols} column",
  "ui_statusbar_carets": "{carets} carets, {sel} lines sel",

  //Statusbar panels (can skip items, can reorder items)
  //Panels: 
  //    caret (Caret(s) info)
  //    enc (Encoding name)
  //    ends (Line ends kind)
  //    lexer (Lexer name)
  //    tabsize (Tab-char size)
  //    ins (Insert/Overwrite mode, hidden by default)
  //    selmode (Shows "-" for normal selection mode, "| |" for column selection mode)
  //    wrap (Shows state of wrap-mode: no wrap, wrap at window, wrap at margin)
  //    msg (Message from CudaText or API, panel is auto-sized)
  //Align: C (center), L (left), R (right)
  "ui_statusbar_panels": "caret,C,170|enc,C,125|ends,C,50|lexer,C,140|tabsize,C,80|selmode,C,15|msg,L,",

  //Statusbar height   
  "ui_statusbar_height": 24,

  //Statusbar message (in the last panel): show time in seconds
  "ui_statusbar_time": 5,

  //Statusbar: tabsize-panel text. Macros here:
  //  {tab}: tab size
  //  {_}: char "_" if spaces used
  "ui_statusbar_tabsize": "Tab size {tab}{_}",
  
  //Statusbar: wrap-panel values.
  //3 strings ","-separated: for wrap off, for wrap at window edge, for wrap at margin
  "ui_statusbar_wrap": "no-wrap,wrap,wrap-m",

  //[Ui]
  //Show full file path in window title
  "ui_title_path": false,
  
  //[Ui/History]
  //Restore session (all named+unnamed tabs) at start
  "ui_reopen_session": true,

  //[Lexers]
  //Allow to apply color-theme to lexer's styles (and auto-show dialog "Lexer styles mapping")
  "ui_lexer_themes": true,

  //[View/Web]
  //Underline HTML color codes (like #008080, #0a0) in these file extensions, 
  //comma-separated, w/o dot. "*" for all files, empty str to disable.
  "underline_color_files": "*",

  //Width of line, pixels
  "underline_color_size": 3,

  //[File/Export]
  //Export to HTML: show line numbers in output
  "export_html_numbers": false,
  
  //Export to HTML: font name in output
  "export_html_font_name": "Courier New",
  
  //Export to HTML: font size in output
  "export_html_font_size": 12,

  //[Python]
  //Sets Python3 engine [has suffix]
  //  If correct, you must see Python version in console panel (Ctrl+`) 
  //  and command "=sys.path" must work in console.
  //
  //  Instruction for Linux, if Py engine not found:
  //  1) open file manager, go to /usr
  //  2) search for "libpython3.*so*",
  //     Terminal command:
  //     $ find /usr -name 'libpython3.*so*' 2>/dev/null
  //  3) if not found, install Python 3, goto 2)
  //  4) set "pylib__linux" to one of the found filenames
  //
  //  Info for macOS:
  //  Homebrew is not OK, it don't install 32-bit .dylib file.
  //  So you must install Python from www.python.org (any 3.x is ok).
  //  CudaText will find Python then (any version until 3.9).
  //
  "pylib": "python35.dll",
  "pylib__linux": "libpython3.5m.so.1.0",
  "pylib__mac": "/Library/Frameworks/Python.framework/Versions/3.5/lib/libpython3.5.dylib",

  //API: delay for event on_change_slow in msec (used in CudaLint)
  "py_change_slow": 2000,

  //[Text/Commands]
  //Commenting: If no selection then comment full line
  "comment_full_line_if_no_sel": true,

  //Commenting: If no selection then move caret to next line
  "comment_move_down": true,

  //Commenting: Try to save chars positions in line after commenting/uncommenting
  "comment_save_column": false,

  //Commenting: If selected >1 lines, insert comment at maximal common indent
  "comment_equal_column": false,
  
  //Duplicating line: If no selection then duplicate full line
  "duplicate_full_line_if_no_sel": true,

  //Duplicating line: If no selection then move caret to next line
  "duplicate_move_down": true,

  //[Text/Completion]
  //Enable special auto-completion for HTML lexer (see wiki)
  "autocomplete_html": true,

  //Enable special auto-completion for CSS lexer (see wiki)
  "autocomplete_css": true,

  //Auto-show auto-completion after typing N word-chars (0: disabled)
  //Option is for lexer-specific configs, not for user.json config.
  "autocomplete_autoshow_chars": 0,

  //Chars, which trigger autocompletion show.
  //Option is for lexer-specific configs, not for user.json config.
  //  E.g. if option is "@!" in config "lexer Nnn.json", then @ and ! 
  //  chars trigger autocompletion, in Nnn lexer.
  "autocomplete_trigger_chars": "", 

  //Auto-close brackets/quotes. 
  //  Value can have only chars: ( [ { ' " `
  //  (don't forget that json needs escaped double-quote)
  //  Function don't work on escaped chars, after backslash.
  //  Function don't work if after caret is non-space. 
  "auto_close_brackets": "([{",
  
  //[File]
  //Extensions of picture files (they show as pictures)
  "picture_types": "bmp,png,jpg,jpeg,jpe,gif,ico",

  //[View/Web]
  //Highlight web links (URLs), with font color + underline
  "links_hilite": true,

  //Regular expression, which finds web links
  "links_regex": "\\b(https?://|ftp://|magnet:\\?|www\\.)\\w[^<>''\"\\s]+",

  //[File]
  //Maximal file size, allowed to open, in Mb
  "ui_max_size_open": 1000,

  //Maximal file size, for which allowed to use lexers, in Mb
  "ui_max_size_lexer": 3,
  
  //Maximal count of lines in text, when code-tree is enabled (0: always disabled)
  "ui_max_lines_codetree": 8000,

  //[Ui]
  //On calling Full-Screen, hide these UI elements
  //Value is string of few chars
  //  if "t" in value: toolbar
  //  if "i" in value: statusbar
  //  if "a" in value: sidebar (on the left edge)
  //  if "p" in value: side panels (near sidebar, e.g. Code Tree, Projects)
  //  if "b" in value: bottom panels (e.g. Console)
  //  if "u" in value: file tabs
  //  if "g" in value: gutter (all columns: numbers, bookmarks...)
  "ui_fullscreen": "tp",
  
  //Highlight border of focused input box (find/ replace/ goto/ console input)
  "ui_active_border": true,

  //Console panel (Ctrl+`): word wrap mode
  "ui_console_wrap": true,

  //[Ui/Sidebar]
  //Show sidebar (vertical toolbar at the left edge)
  "ui_sidebar_show": true,

  //Sidebar icons theme
  //Folders from: sideicons
  "ui_sidebar_theme": "octicons_20x20",
  
  //[Find/Hotkeys]
  //Hotkeys in Find/Replace dialog
  "find_hotkey_find_dlg": "Ctrl+F", 
  "find_hotkey_replace_dlg": "Ctrl+R", 
  "find_hotkey_find_first": "Alt+Enter", 
  "find_hotkey_find_next": "Enter", 
  "find_hotkey_find_prev": "Shift+Enter", 
  "find_hotkey_replace": "Alt+Z", 
  "find_hotkey_replace_no_next": "Ctrl+Alt+Z", 
  "find_hotkey_replace_all": "Alt+A", 
  "find_hotkey_count_all": "Alt+O", 
  "find_hotkey_select_all": "Alt+E", 
  "find_hotkey_mark_all": "Alt+K", 
  "find_hotkey_op_regex": "Alt+R", 
  "find_hotkey_op_case": "Alt+C", 
  "find_hotkey_op_words": "Alt+W", 
  "find_hotkey_op_wrapped": "Alt+N", 
  "find_hotkey_op_in_sel": "Alt+X", 
  "find_hotkey_op_multiline": "Alt+M", 
  "find_hotkey_op_confirm_rep": "Alt+Y", 
  
}
